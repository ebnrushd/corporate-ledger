// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

/**
 * @title VisaTopUp
 * @dev This contract facilitates the initiation and confirmation of Visa card top-up requests.
 * It is designed to be controlled by a backend system that handles the actual interaction
 * with Visa APIs or other off-chain payment processing services.
 *
 * The workflow is as follows:
 * 1. An authorized backend calls `initiateTopUp` to record a user's top-up request on-chain.
 *    This emits a `TopUpInitiated` event.
 * 2. An off-chain system listens for this event, processes the Visa top-up, and then
 *    calls `confirmTopUp` with the outcome.
 * 3. `confirmTopUp` emits a `TopUpCompleted` event with the success status.
 */
contract VisaTopUp {
    // --- State Variables ---

    address public owner;
    address public authorizedBackendAddress;

    // --- Events ---

    /**
     * @dev Emitted when a top-up request is initiated by the authorized backend.
     * @param user The address of the user for whom the top-up is intended.
     * @param amount The amount of the top-up.
     * @param visaCardLastFourDigits The last four digits of the Visa card for reference.
     * @param topUpId A unique identifier for this top-up request (e.g., generated off-chain).
     */
    event TopUpInitiated(
        bytes32 indexed topUpId,
        address indexed user,
        uint256 amount,
        string visaCardLastFourDigits
    );

    /**
     * @dev Emitted when a top-up process is completed and confirmed by the backend.
     * @param topUpId The unique identifier for the top-up request, matching the one from TopUpInitiated.
     * @param success Whether the top-up was successful or not.
     * @param message Additional information or a reason for failure.
     */
    event TopUpCompleted(
        bytes32 indexed topUpId,
        bool success,
        string message
    );

    // --- Modifiers ---

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner, "VisaTopUp: Caller is not the owner");
        _;
    }

    /**
     * @dev Throws if called by any account other than the authorized backend.
     */
    modifier onlyAuthorizedBackend() {
        require(msg.sender == authorizedBackendAddress, "VisaTopUp: Caller is not the authorized backend");
        _;
    }

    // --- Constructor ---

    /**
     * @dev Sets the deployer of the contract as the initial owner.
     * The authorized backend address needs to be set separately by the owner.
     */
    constructor() {
        owner = msg.sender;
        emit OwnershipTransferred(address(0), owner); // Standard event for ownership changes
    }

    // --- Owner Functions ---

    /**
     * @dev Allows the owner to set or update the address of the authorized backend system.
     * @param _newBackendAddress The address of the new authorized backend.
     */
    function setAuthorizedBackend(address _newBackendAddress) public onlyOwner {
        require(_newBackendAddress != address(0), "VisaTopUp: New backend address cannot be the zero address");
        address oldBackendAddress = authorizedBackendAddress;
        authorizedBackendAddress = _newBackendAddress;
        emit AuthorizedBackendChanged(oldBackendAddress, _newBackendAddress);
    }

    /**
     * @dev Allows the owner to transfer ownership of the contract to a new account.
     * @param _newOwner The address to transfer ownership to.
     */
    function transferOwnership(address _newOwner) public onlyOwner {
        require(_newOwner != address(0), "VisaTopUp: New owner cannot be the zero address");
        address oldOwner = owner;
        owner = _newOwner;
        emit OwnershipTransferred(oldOwner, _newOwner);
    }

    // --- Backend Callable Functions ---

    /**
     * @dev Initiates a Visa top-up request. Callable only by the authorized backend.
     * The actual top-up is processed off-chain. This function logs the request.
     * @param _topUpId A unique identifier for this transaction, likely generated by the backend.
     * @param _user The user's address for whom the top-up is being made.
     * @param _amount The amount for the top-up (in the smallest unit, e.g., cents).
     * @param _visaCardLastFourDigits The last four digits of the Visa card, for reference/tracking.
     */
    function initiateTopUp(
        bytes32 _topUpId,
        address _user,
        uint256 _amount,
        string calldata _visaCardLastFourDigits
    ) public onlyAuthorizedBackend {
        require(_user != address(0), "VisaTopUp: User address cannot be the zero address");
        require(_amount > 0, "VisaTopUp: Top-up amount must be greater than zero");
        // Basic validation for string length, though more robust checks might be needed depending on requirements
        bytes memory visaDigitsBytes = bytes(_visaCardLastFourDigits);
        require(visaDigitsBytes.length == 4, "VisaTopUp: Invalid Visa last four digits length");

        emit TopUpInitiated(_topUpId, _user, _amount, _visaCardLastFourDigits);
    }

    /**
     * @dev Confirms the completion of a Visa top-up. Callable only by the authorized backend.
     * @param _topUpId The unique identifier for the top-up request, matching the one from initiateTopUp.
     * @param _success True if the top-up was successful, false otherwise.
     * @param _message A message providing details about the completion (e.g., "Completed" or "Insufficient funds").
     */
    function confirmTopUp(
        bytes32 _topUpId,
        bool _success,
        string calldata _message
    ) public onlyAuthorizedBackend {
        // Consider adding a check to ensure _topUpId was actually initiated if maintaining state,
        // but for a stateless event-based system, this might be optional.
        // For example: require(initiatedTopUps[_topUpId].exists, "TopUp ID not found");

        emit TopUpCompleted(_topUpId, _success, _message);
    }

    // --- Events for Administrative Changes ---
    event AuthorizedBackendChanged(address indexed oldBackendAddress, address indexed newBackendAddress);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    // --- Fallback and Receive Functions (Optional) ---
    // Adding receive function to allow the contract to accept Ether if needed in the future,
    // though not directly used by the current top-up logic.
    receive() external payable {}
    fallback() external payable {}
}
